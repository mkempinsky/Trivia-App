{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { getProp, shuffleArray } from \"../../lib/utils\";\nimport Button from \"../Button\";\n\nvar Question =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Question, _React$Component);\n\n  function Question() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Question);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Question)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isAnsweredCorrect: null,\n      isAnswered: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      var data = _this.props.data;\n      var correctAnswer = getProp(data, \"correct_answer\");\n      var incorrrectAnswers = getProp(data, \"incorrect_answers\"); // create array with all answers as object\n\n      var answers = incorrrectAnswers.map(function (answer) {\n        return {\n          answer: answer,\n          correct: false\n        };\n      });\n      answers.push({\n        answer: correctAnswer,\n        correct: true\n      });\n      var shuffledAnswers = shuffleArray(answers);\n\n      _this.setState({\n        answers: shuffledAnswers\n      });\n\n      return;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClick\", function (answer) {\n      _this.setState({\n        isAnsweredCorrect: answer,\n        isAnswered: true\n      }, function () {\n        this.props.triggerParentUpdate(this.state.isAnsweredCorrect);\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Question, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var data = this.props.data;\n      var question = getProp(data, \"question\");\n      var difficulty = getProp(data, \"difficulty\");\n      var category = getProp(data, \"category\").replace('Entertainment:', '');\n      var answers = this.state.answers;\n      return __jsx(\"div\", {\n        className: \"question-card\"\n      }, __jsx(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        dangerouslySetInnerHTML: {\n          __html: question\n        }\n      }), __jsx(\"div\", {\n        className: \"answers-container\"\n      }, this.state.answers && __jsx(\"div\", null, answers.map(function (answer) {\n        var theme = _this2.state.isAnsweredCorrect ? \"correct\" : \"incorrect\";\n        var correctColor = answer.correct && _this2.state.isAnsweredCorrect && \"green\";\n        var showCorrect = answer.correct && _this2.state.isAnswered && !_this2.state.isAnsweredCorrect && \"reveal-correct\";\n        return __jsx(Button, {\n          key: answer.answer,\n          className: \"question \".concat(correctColor, \" \").concat(showCorrect),\n          disabled: _this2.state.isAnswered,\n          onClick: function onClick() {\n            return _this2.handleClick(answer.correct);\n          }\n        }, __jsx(\"span\", {\n          dangerouslySetInnerHTML: {\n            __html: answer.answer\n          }\n        }));\n      }))), __jsx(\"div\", {\n        className: \"difficulty-container\"\n      }, \"Level:\", \" \", difficulty && difficulty === \"easy\" && __jsx(\"span\", null, __jsx(\"i\", {\n        className: \"fas fa-circle \".concat(difficulty)\n      })), difficulty && difficulty === \"medium\" && __jsx(\"span\", null, __jsx(\"i\", {\n        className: \"fas fa-circle \".concat(difficulty)\n      }), __jsx(\"i\", {\n        className: \"fas fa-circle \".concat(difficulty)\n      })), difficulty && difficulty === \"hard\" && __jsx(\"span\", null, __jsx(\"i\", {\n        className: \"fas fa-circle \".concat(difficulty)\n      }), __jsx(\"i\", {\n        className: \"fas fa-circle \".concat(difficulty)\n      }), __jsx(\"i\", {\n        className: \"fas fa-circle \".concat(difficulty)\n      }))), __jsx(\"span\", {\n        style: {\n          fontSize: '12px'\n        },\n        dangerouslySetInnerHTML: {\n          __html: category\n        }\n      }));\n    }\n  }]);\n\n  return Question;\n}(React.Component);\n\nexport default Question;","map":{"version":3,"sources":["/Users/michelekempinsky2/Development/projects/Trivia-App/src/components/QuestionSingle/index.js"],"names":["React","getProp","shuffleArray","Button","Question","isAnsweredCorrect","isAnswered","data","props","correctAnswer","incorrrectAnswers","answers","map","answer","correct","push","shuffledAnswers","setState","triggerParentUpdate","state","question","difficulty","category","replace","textAlign","__html","theme","correctColor","showCorrect","handleClick","fontSize","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { getProp, shuffleArray } from \"../../lib/utils\";\nimport Button from \"../Button\";\n\nclass Question extends React.Component {\n  state = {\n    isAnsweredCorrect: null,\n    isAnswered: null\n  };\n  componentDidMount = () => {\n    const data = this.props.data;\n    const correctAnswer = getProp(data, \"correct_answer\");\n    const incorrrectAnswers = getProp(data, \"incorrect_answers\");\n    // create array with all answers as object\n    const answers = incorrrectAnswers.map(answer => {\n      return { answer, correct: false };\n    });\n    answers.push({ answer: correctAnswer, correct: true });\n    const shuffledAnswers = shuffleArray(answers);\n    this.setState({\n      answers: shuffledAnswers\n    });\n    return;\n  };\n\n  handleClick = answer => {\n    this.setState(\n      {\n        isAnsweredCorrect: answer,\n        isAnswered: true\n      },\n      function() {\n        this.props.triggerParentUpdate(this.state.isAnsweredCorrect);\n      }\n    );\n  };\n\n  render() {\n    const data = this.props.data;\n    const question = getProp(data, \"question\");\n    const difficulty = getProp(data, \"difficulty\");\n    const category = getProp(data, \"category\").replace('Entertainment:', '');\n    const answers = this.state.answers;\n    return (\n      <div className=\"question-card\">\n        <p\n          style={{ textAlign: \"center\" }}\n          dangerouslySetInnerHTML={{ __html: question }}\n        />\n        <div className=\"answers-container\">\n          {this.state.answers && (\n            <div>\n              {answers.map(answer => {\n                const theme = this.state.isAnsweredCorrect\n                  ? \"correct\"\n                  : \"incorrect\";\n                const correctColor =\n                  answer.correct && this.state.isAnsweredCorrect && \"green\";\n                const showCorrect =\n                  answer.correct &&\n                  this.state.isAnswered &&\n                  !this.state.isAnsweredCorrect &&\n                  \"reveal-correct\";\n\n                return (\n                  <Button\n                    key={answer.answer}\n                    className={`question ${correctColor} ${showCorrect}`}\n                    disabled={this.state.isAnswered}\n                    onClick={() => this.handleClick(answer.correct)}\n                  >\n                    <span dangerouslySetInnerHTML={{ __html: answer.answer }} />\n                  </Button>\n                );\n              })}\n            </div>\n          )}\n        </div>\n        <div className=\"difficulty-container\">\n          Level:{\" \"}\n          {difficulty && difficulty === \"easy\" && (\n            <span>\n              <i className={`fas fa-circle ${difficulty}`} />\n            </span>\n          )}\n          {difficulty && difficulty === \"medium\" && (\n            <span>\n              <i className={`fas fa-circle ${difficulty}`} />\n              <i className={`fas fa-circle ${difficulty}`} />\n            </span>\n          )}\n          {difficulty && difficulty === \"hard\" && (\n            <span>\n              <i className={`fas fa-circle ${difficulty}`} />\n              <i className={`fas fa-circle ${difficulty}`} />\n              <i className={`fas fa-circle ${difficulty}`} />\n            </span>\n          )}\n        </div>\n        <span style={{fontSize: '12px'}} dangerouslySetInnerHTML={{__html: category}}/>\n      </div>\n    );\n  }\n}\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}