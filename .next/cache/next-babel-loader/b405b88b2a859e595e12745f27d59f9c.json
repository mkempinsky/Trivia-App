{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Question from \"../QuestionSingle\";\nimport swal from \"sweetalert2\";\nvar levels = [\"random\", \"easy\", \"medium\", \"hard\"];\nvar categories = [{\n  title: 'General Knowledge',\n  key: 9\n}, {\n  title: 'Television',\n  key: 14\n}, {\n  title: 'Film',\n  key: 11\n}, {\n  title: 'Music',\n  key: 12\n}, {\n  title: 'Science & Nature',\n  key: 17\n}, {\n  title: 'Sports',\n  key: 21\n}, {\n  title: 'Geography',\n  key: 22\n}, {\n  title: 'History',\n  key: 23\n}, {\n  title: 'Politics',\n  key: 24\n}, {\n  title: 'Celebrities',\n  key: 26\n}, {\n  title: 'Animals',\n  key: 27\n}];\n\nvar Questions =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Questions, _React$Component);\n\n  function Questions() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Questions);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Questions)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isLoaded: false,\n      error: null,\n      questions: [],\n      points: 0,\n      difficulty: null,\n      category: null,\n      isStarted: null,\n      questionsAnswered: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchQuestions\", function () {\n      var level = _this.state.difficulty === \"random\" || _this.state.difficulty === null ? \"\" : \"&difficulty=\".concat(_this.state.difficulty);\n      var category = _this.state.category === null ? \"&category=\".concat(9) : \"&category=\".concat(_this.state.category);\n      fetch(\"https://opentdb.com/api.php?amount=10\".concat(level).concat(category)).then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        _this.setState({\n          isLoaded: true,\n          points: 0,\n          questions: result.results,\n          isStarted: true\n        });\n      }, function (error) {\n        _this.setState({\n          isLoaded: true,\n          error: error\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateCounter\", function (isAnsweredCorrect) {\n      console.log(_this.state.questions.length);\n\n      _this.setState(function (prevState) {\n        return _objectSpread({}, prevState, {\n          points: isAnsweredCorrect && ++prevState.points || prevState.points,\n          questionsAnswered: ++prevState.questionsAnswered\n        });\n      }, function () {\n        if (_this.state.questionsAnswered === _this.state.questions.length) {\n          swal({\n            title: 'Complete!',\n            text: \"You got \".concat(_this.state.points, \" / \").concat(_this.state.questions.length, \" questions correct.\"),\n            type: 'success',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Review Answers',\n            cancelButtonText: 'Start New Trivia'\n          }).then(function (result) {\n            if (result.value) {\n              _this.setState(function (prevState) {\n                return _objectSpread({}, prevState);\n              });\n\n              return;\n            }\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLevelClick\", function (level) {\n      _this.setState({\n        difficulty: level\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCategoryClick\", function (category) {\n      _this.setState({\n        category: category\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRestart\", function () {\n      swal({\n        title: 'Are you sure?',\n        text: \"You won't be able to come back to this quiz.\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes, restart!'\n      }).then(function (result) {\n        if (result.value) {\n          _this.setState(function (prevState) {\n            return _objectSpread({}, prevState, {\n              isStarted: null,\n              questionsAnswered: 0\n            });\n          });\n\n          return;\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Questions, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var questions = this.state.questions;\n      var questionsCount = questions.length;\n      var currentLevel = this.state.difficulty || \"random\";\n      var currentCategory = this.state.category || 9;\n      console.log(this.state.questionsAnswered);\n      return __jsx(\"div\", null, !this.state.isStarted && __jsx(\"div\", null, __jsx(\"div\", {\n        className: \"filters\"\n      }, __jsx(\"p\", null, \"Select a level:\"), __jsx(\"div\", {\n        className: \"levels-container\"\n      }, levels.map(function (level) {\n        var active = level === currentLevel ? \"active\" : \"\";\n        return __jsx(\"button\", {\n          key: level,\n          className: \"levels \".concat(active),\n          onClick: function onClick() {\n            return _this2.handleLevelClick(level);\n          }\n        }, level.toUpperCase());\n      })), __jsx(\"p\", null, \"Select a Category:\"), __jsx(\"div\", {\n        className: \"levels-container\"\n      }, categories.map(function (category) {\n        var active = category.key === currentCategory ? \"active\" : \"\";\n        return __jsx(\"button\", {\n          key: category.key,\n          className: \"categories \".concat(active),\n          onClick: function onClick() {\n            return _this2.handleCategoryClick(category.key);\n          }\n        }, category.title.toUpperCase());\n      }))), __jsx(\"div\", null, __jsx(\"button\", {\n        className: \"start\",\n        onClick: this.fetchQuestions\n      }, \"Begin Trivia\"))), this.state.isStarted && questions && __jsx(\"div\", {\n        className: \"container\"\n      }, __jsx(\"div\", {\n        className: \"counter\",\n        style: {\n          flex: '1'\n        }\n      }, __jsx(\"h3\", {\n        style: {\n          margin: '0 0 5px 0'\n        }\n      }, \"Points:\"), this.state.points, \"/\", questionsCount, __jsx(\"a\", {\n        style: {\n          display: 'block',\n          fontSize: '12px',\n          marginTop: '15px'\n        },\n        onClick: this.handleRestart\n      }, \"New Trivia\")), __jsx(\"div\", {\n        style: {\n          flex: '2'\n        }\n      }, questions.map(function (question) {\n        return __jsx(Question, {\n          key: question.question,\n          data: question,\n          triggerParentUpdate: _this2.updateCounter\n        });\n      }))));\n    }\n  }]);\n\n  return Questions;\n}(React.Component);\n\nexport default Questions;","map":{"version":3,"sources":["/Users/michelekempinsky2/Development/projects/Trivia-App/src/components/Questions/index.js"],"names":["React","Question","swal","levels","categories","title","key","Questions","isLoaded","error","questions","points","difficulty","category","isStarted","questionsAnswered","level","state","fetch","then","res","json","result","setState","results","isAnsweredCorrect","console","log","length","prevState","text","type","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","value","questionsCount","currentLevel","currentCategory","map","active","handleLevelClick","toUpperCase","handleCategoryClick","fetchQuestions","flex","margin","display","fontSize","marginTop","handleRestart","question","updateCounter","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Question from \"../QuestionSingle\";\nimport swal from \"sweetalert2\";\n\n\nconst levels = [\"random\", \"easy\", \"medium\", \"hard\"];\nconst categories = [\n  {title: 'General Knowledge', key: 9},\n  {title: 'Television', key: 14},\n  {title: 'Film', key: 11},\n  {title: 'Music', key: 12},\n  {title: 'Science & Nature', key: 17},\n  {title: 'Sports', key: 21},\n  {title: 'Geography', key: 22},\n  {title: 'History', key: 23},\n  {title: 'Politics', key: 24},\n  {title: 'Celebrities', key: 26}, \n  {title: 'Animals', key: 27}\n]\n\nclass Questions extends React.Component {\n  state = {\n    isLoaded: false,\n    error: null,\n    questions: [],\n    points: 0,\n    difficulty: null,\n    category: null,\n    isStarted: null,\n    questionsAnswered: 0\n  };\n  fetchQuestions = () => {\n    let level =\n      this.state.difficulty === \"random\" || this.state.difficulty === null\n        ? \"\"\n        : `&difficulty=${this.state.difficulty}`;\n    let category = this.state.category === null ? `&category=${9}` : `&category=${this.state.category}`;\n    fetch(`https://opentdb.com/api.php?amount=10${level}${category}`)\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState(\n            {\n              isLoaded: true,\n              points: 0,\n              questions: result.results,\n              isStarted: true\n            }\n          );\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  };\n  updateCounter = isAnsweredCorrect => {\n    console.log(this.state.questions.length);\n      this.setState(prevState => ({\n        ...prevState,\n        points: isAnsweredCorrect && ++prevState.points || prevState.points,\n        questionsAnswered: ++prevState.questionsAnswered\n      }), () => {\n        if(this.state.questionsAnswered === this.state.questions.length){\n          swal({\n            title: 'Complete!',\n            text: `You got ${this.state.points} / ${this.state.questions.length} questions correct.`,\n            type: 'success',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Review Answers',\n            cancelButtonText: 'Start New Trivia'\n          }).then((result) => {\n            if (result.value) {\n              this.setState(prevState => ({\n                ...prevState,\n              }));\n              return;\n            }\n          })\n        }\n      });\n  };\n  handleLevelClick = level => {\n    this.setState(\n      {\n        difficulty: level\n      }\n    );\n  };\n  handleCategoryClick = category => {\n    this.setState(\n      {\n        category\n      }\n    );\n  };\n  handleRestart = () => {\n    swal({\n      title: 'Are you sure?',\n      text: \"You won't be able to come back to this quiz.\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, restart!'\n    }).then((result) => {\n      if (result.value) {\n        this.setState(prevState => ({\n          ...prevState, \n          isStarted: null,\n          questionsAnswered: 0\n        }));\n        return;\n      }\n    })\n  }\n\n  render() {\n    const questions = this.state.questions;\n    const questionsCount = questions.length;\n    const currentLevel = this.state.difficulty || \"random\";\n    const currentCategory = this.state.category || 9;\n    console.log(this.state.questionsAnswered);\n    return (\n      <div>\n        {!this.state.isStarted && (\n          <div>\n          <div className=\"filters\">\n            <p>Select a level:</p>\n            <div className=\"levels-container\">\n              {levels.map(level => {\n                const active = level === currentLevel ? \"active\" : \"\";\n                return (\n                  <button\n                    key={level}\n                    className={`levels ${active}`}\n                    onClick={() => this.handleLevelClick(level)}\n                  >\n                    {level.toUpperCase()}\n                  </button>\n                );\n              })}\n            </div>\n            <p>Select a Category:</p>\n            <div className=\"levels-container\">\n              {categories.map(category => {\n                const active = category.key === currentCategory ? \"active\" : \"\";\n                return (\n                  <button\n                    key={category.key}\n                    className={`categories ${active}`}\n                    onClick={() => this.handleCategoryClick(category.key)}\n                  >\n                    {category.title.toUpperCase()}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n          <div>\n            <button className=\"start\" onClick={this.fetchQuestions}>Begin Trivia</button>\n          </div>\n          </div>\n        )}\n        { this.state.isStarted && questions && (\n          <div className=\"container\">\n              <div className=\"counter\" style={{flex: '1'}}>\n                <h3 style={{margin: '0 0 5px 0'}}>Points:</h3>\n                {this.state.points}/{questionsCount}\n                <a \n                  style={{display: 'block', fontSize: '12px', marginTop: '15px'}}\n                  onClick={this.handleRestart}>New Trivia</a>\n              </div>\n            <div style={{flex: '2'}}>\n              {questions.map(question => {\n                return (\n                  <Question\n                    key={question.question}\n                    data={question}\n                    triggerParentUpdate={this.updateCounter}\n                  />\n                );\n              })}\n            </div>\n          </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Questions;\n"]},"metadata":{},"sourceType":"module"}