{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\n// COLORS\nexport var blue = function blue(shade) {\n  var shades = {\n    200: '#4E9EE0',\n    300: '#182957',\n    400: '#1C2838',\n    500: '#354763',\n    550: '#0F2555',\n    600: '#2F77B2',\n    700: '#27323F',\n    default: '#2F77B2'\n  };\n  return shades[+shade] || shades.default;\n};\nexport var yellow = function yellow(shade) {\n  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var shades = {\n    500: \"rgba(255, 179, 71, \".concat(opacity, \")\"),\n    default: \"rgba(255, 179, 71, \".concat(opacity, \")\")\n  };\n  return shades[+shade] || shades.default;\n};\nexport var dropShadow = function dropShadow(shadow) {\n  var shadows = {\n    500: '0 14px 28px 0 rgba(37, 79, 115, 0.11)',\n    default: '0 14px 28px 0 rgba(37, 79, 115, 0.11)'\n  };\n  return shadows[+shadow] || shadows.default;\n}; // GLOBAL STYLES\n\nexport var globalStyles = \"\\n\\t* {\\n\\t\\tmargin: 0;\\n\\t\\tpadding: 0;\\n\\t\\tbox-sizing: border-box;\\n\\t\\t-webkit-box-sizing: border-box;\\n\\t}\\n\\thtml, body {\\n\\t\\theight: 100%;\\n        font-family: 'Gudea', sans-serif;\\n\\t\\tcolor: #1C2838;\\n\\t\\tfont-size: 16px;\\n\\t}\\n\\thtml {\\n\\t\\t-webkit-font-smoothing: antialiased;\\n\\t}\\n    h1 {\\n        font-family: 'Comfortaa', cursive;\\n        font-weight: Bold;\\n        font-size: 22px;\\n    }\\n    h2 {\\n        font-family: 'Comfortaa', cursive;\\n        font-size: 20px;\\n    }\\n\\t\";\nexport var px = function px(value) {\n  if (typeof value === 'number') {\n    return value + 'px';\n  } else if (typeof value === 'string') {\n    /**\n     * Check if already ends with px, em, rem, etc.\n     */\n    var hasLetters = value.match(/\\d/g);\n\n    if (hasLetters) {\n      var numsOnly = hasLetters.join('');\n      return numsOnly + 'px';\n    }\n\n    return value + 'px';\n  } else {\n    console.log('Must pass string or number to px()');\n    return '25px';\n  }\n};\nexport var BREAKPOINT = '992px';\nexport var BREAKPOINT_PX = px(BREAKPOINT);\nexport var MAX_WIDTH = '1280';\nexport var MAX_WIDTH_PX = px(MAX_WIDTH);\nexport function hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? \"\".concat(_parseInt(result[1], 16), \", \").concat(_parseInt(result[2], 16), \", \").concat(_parseInt(result[3], 16)) : '0, 0, 0';\n}","map":{"version":3,"sources":["/Users/michelekempinsky2/Development/projects/Trivia-App/src/lib/styles.js"],"names":["blue","shade","shades","default","yellow","opacity","dropShadow","shadow","shadows","globalStyles","px","value","hasLetters","match","numsOnly","join","console","log","BREAKPOINT","BREAKPOINT_PX","MAX_WIDTH","MAX_WIDTH_PX","hexToRgb","hex","result","exec"],"mappings":";AAAA;AACA,OAAO,IAAMA,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AACzB,MAAMC,MAAM,GAAG;AACX,SAAK,SADM;AAEX,SAAK,SAFM;AAGX,SAAK,SAHM;AAIX,SAAK,SAJM;AAKX,SAAK,SALM;AAMX,SAAK,SANM;AAOX,SAAK,SAPM;AAQXC,IAAAA,OAAO,EAAE;AARE,GAAf;AAUA,SAAOD,MAAM,CAAC,CAACD,KAAF,CAAN,IAAkBC,MAAM,CAACC,OAAhC;AACH,CAZM;AAcP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACH,KAAD,EAAwB;AAAA,MAAhBI,OAAgB,uEAAN,CAAM;AAC1C,MAAMH,MAAM,GAAG;AACX,sCAA2BG,OAA3B,MADW;AAEXF,IAAAA,OAAO,+BAAwBE,OAAxB;AAFI,GAAf;AAIA,SAAOH,MAAM,CAAC,CAACD,KAAF,CAAN,IAAkBC,MAAM,CAACC,OAAhC;AACH,CANM;AAQP,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAAAC,MAAM,EAAI;AAChC,MAAMC,OAAO,GAAG;AACZ,SAAK,uCADO;AAEZL,IAAAA,OAAO,EAAE;AAFG,GAAhB;AAIA,SAAOK,OAAO,CAAC,CAACD,MAAF,CAAP,IAAoBC,OAAO,CAACL,OAAnC;AACH,CANM,C,CAUP;;AACA,OAAO,IAAMM,YAAY,yfAAlB;AA2BP,OAAO,IAAMC,EAAE,GAAG,SAALA,EAAK,CAAAC,KAAK,EAAI;AACvB,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAOA,KAAK,GAAG,IAAf;AACH,GAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClC;;;AAGA,QAAMC,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAY,KAAZ,CAAnB;;AAEA,QAAID,UAAJ,EAAgB;AACZ,UAAIE,QAAQ,GAAGF,UAAU,CAACG,IAAX,CAAgB,EAAhB,CAAf;AACA,aAAOD,QAAQ,GAAG,IAAlB;AACH;;AAED,WAAOH,KAAK,GAAG,IAAf;AACH,GAZM,MAYA;AACHK,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACA,WAAO,MAAP;AACH;AACJ,CAnBM;AAqBP,OAAO,IAAMC,UAAU,GAAG,OAAnB;AACP,OAAO,IAAMC,aAAa,GAAGT,EAAE,CAACQ,UAAD,CAAxB;AAEP,OAAO,IAAME,SAAS,GAAG,MAAlB;AACP,OAAO,IAAMC,YAAY,GAAGX,EAAE,CAACU,SAAD,CAAvB;AAGP,OAAO,SAASE,QAAT,CAAkBC,GAAlB,EAAuB;AAC1B,MAAIC,MAAM,GAAG,4CAA4CC,IAA5C,CAAiDF,GAAjD,CAAb;AAEA,SAAOC,MAAM,aACJ,UAASA,MAAM,CAAC,CAAD,CAAf,EAAoB,EAApB,CADI,eACwB,UAASA,MAAM,CAAC,CAAD,CAAf,EAAoB,EAApB,CADxB,eACoD,UACvDA,MAAM,CAAC,CAAD,CADiD,EAEvD,EAFuD,CADpD,IAKP,SALN;AAMH","sourcesContent":["// COLORS\nexport const blue = shade => {\n    const shades = {\n        200: '#4E9EE0',\n        300: '#182957',\n        400: '#1C2838',\n        500: '#354763',\n        550: '#0F2555',\n        600: '#2F77B2',\n        700: '#27323F',\n        default: '#2F77B2'\n    };\n    return shades[+shade] || shades.default;\n};\n\nexport const yellow = (shade, opacity = 1) => {\n    const shades = {\n        500: `rgba(255, 179, 71, ${opacity})`,\n        default: `rgba(255, 179, 71, ${opacity})`\n    };\n    return shades[+shade] || shades.default;\n}\n\nexport const dropShadow = shadow => {\n    const shadows = {\n        500: '0 14px 28px 0 rgba(37, 79, 115, 0.11)',\n        default: '0 14px 28px 0 rgba(37, 79, 115, 0.11)'\n    };\n    return shadows[+shadow] || shadows.default;\n};\n\n\n\n// GLOBAL STYLES\nexport const globalStyles = `\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t\t-webkit-box-sizing: border-box;\n\t}\n\thtml, body {\n\t\theight: 100%;\n        font-family: 'Gudea', sans-serif;\n\t\tcolor: #1C2838;\n\t\tfont-size: 16px;\n\t}\n\thtml {\n\t\t-webkit-font-smoothing: antialiased;\n\t}\n    h1 {\n        font-family: 'Comfortaa', cursive;\n        font-weight: Bold;\n        font-size: 22px;\n    }\n    h2 {\n        font-family: 'Comfortaa', cursive;\n        font-size: 20px;\n    }\n\t`;\n\nexport const px = value => {\n    if (typeof value === 'number') {\n        return value + 'px';\n    } else if (typeof value === 'string') {\n        /**\n         * Check if already ends with px, em, rem, etc.\n         */\n        const hasLetters = value.match(/\\d/g);\n\n        if (hasLetters) {\n            let numsOnly = hasLetters.join('');\n            return numsOnly + 'px';\n        }\n\n        return value + 'px';\n    } else {\n        console.log('Must pass string or number to px()');\n        return '25px';\n    }\n};\n\nexport const BREAKPOINT = '992px';\nexport const BREAKPOINT_PX = px(BREAKPOINT);\n\nexport const MAX_WIDTH = '1280';\nexport const MAX_WIDTH_PX = px(MAX_WIDTH);\n\n\nexport function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    return result\n        ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(\n              result[3],\n              16\n          )}`\n        : '0, 0, 0';\n}\n"]},"metadata":{},"sourceType":"module"}