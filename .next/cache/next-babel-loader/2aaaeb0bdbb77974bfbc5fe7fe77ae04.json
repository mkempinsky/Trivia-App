{"ast":null,"code":"// COLORS\nexport const blue = shade => {\n  const shades = {\n    200: '#4E9EE0',\n    300: '#182957',\n    400: '#1C2838',\n    500: '#354763',\n    550: '#0F2555',\n    600: '#2F77B2',\n    700: '#27323F',\n    default: '#2F77B2'\n  };\n  return shades[+shade] || shades.default;\n}; // GLOBAL STYLES\n\nexport const globalStyles = `\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t\t-webkit-box-sizing: border-box;\n\t}\n\thtml, body {\n\t\theight: 100%;\n        font-family: 'Comfortaa', cursive;\n\t\tcolor: #1C2838;\n\t\tfont-size: 16px;\n\t}\n\thtml {\n\t\t-webkit-font-smoothing: antialiased;\n\t}\n\n\t`;\nexport const px = value => {\n  if (typeof value === 'number') {\n    return value + 'px';\n  } else if (typeof value === 'string') {\n    /**\n     * Check if already ends with px, em, rem, etc.\n     */\n    const hasLetters = value.match(/\\d/g);\n\n    if (hasLetters) {\n      let numsOnly = hasLetters.join('');\n      return numsOnly + 'px';\n    }\n\n    return value + 'px';\n  } else {\n    console.log('Must pass string or number to px()');\n    return '25px';\n  }\n};\nexport const BREAKPOINT = '992px';\nexport const BREAKPOINT_PX = px(BREAKPOINT);\nexport function hexToRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}` : '0, 0, 0';\n}","map":{"version":3,"sources":["/Users/michelekempinsky2/Development/projects/Trivia-App/src/lib/styles.js"],"names":["blue","shade","shades","default","globalStyles","px","value","hasLetters","match","numsOnly","join","console","log","BREAKPOINT","BREAKPOINT_PX","hexToRgb","hex","result","exec","parseInt"],"mappings":"AAAA;AACA,OAAO,MAAMA,IAAI,GAAGC,KAAK,IAAI;AACzB,QAAMC,MAAM,GAAG;AACX,SAAK,SADM;AAEX,SAAK,SAFM;AAGX,SAAK,SAHM;AAIX,SAAK,SAJM;AAKX,SAAK,SALM;AAMX,SAAK,SANM;AAOX,SAAK,SAPM;AAQXC,IAAAA,OAAO,EAAE;AARE,GAAf;AAUA,SAAOD,MAAM,CAAC,CAACD,KAAF,CAAN,IAAkBC,MAAM,CAACC,OAAhC;AACH,CAZM,C,CAkBP;;AACA,OAAO,MAAMC,YAAY,GAAI;;;;;;;;;;;;;;;;;EAAtB;AAmBP,OAAO,MAAMC,EAAE,GAAGC,KAAK,IAAI;AACvB,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,WAAOA,KAAK,GAAG,IAAf;AACH,GAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClC;;;AAGA,UAAMC,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAY,KAAZ,CAAnB;;AAEA,QAAID,UAAJ,EAAgB;AACZ,UAAIE,QAAQ,GAAGF,UAAU,CAACG,IAAX,CAAgB,EAAhB,CAAf;AACA,aAAOD,QAAQ,GAAG,IAAlB;AACH;;AAED,WAAOH,KAAK,GAAG,IAAf;AACH,GAZM,MAYA;AACHK,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACA,WAAO,MAAP;AACH;AACJ,CAnBM;AAqBP,OAAO,MAAMC,UAAU,GAAG,OAAnB;AACP,OAAO,MAAMC,aAAa,GAAGT,EAAE,CAACQ,UAAD,CAAxB;AAGP,OAAO,SAASE,QAAT,CAAkBC,GAAlB,EAAuB;AAC1B,MAAIC,MAAM,GAAG,4CAA4CC,IAA5C,CAAiDF,GAAjD,CAAb;AAEA,SAAOC,MAAM,GACN,GAAEE,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAgB,KAAIE,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAgB,KAAIE,QAAQ,CAC/DF,MAAM,CAAC,CAAD,CADyD,EAE/D,EAF+D,CAGjE,EAJK,GAKP,SALN;AAMH","sourcesContent":["// COLORS\nexport const blue = shade => {\n    const shades = {\n        200: '#4E9EE0',\n        300: '#182957',\n        400: '#1C2838',\n        500: '#354763',\n        550: '#0F2555',\n        600: '#2F77B2',\n        700: '#27323F',\n        default: '#2F77B2'\n    };\n    return shades[+shade] || shades.default;\n};\n\n\n\n\n\n// GLOBAL STYLES\nexport const globalStyles = `\n\t* {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tbox-sizing: border-box;\n\t\t-webkit-box-sizing: border-box;\n\t}\n\thtml, body {\n\t\theight: 100%;\n        font-family: 'Comfortaa', cursive;\n\t\tcolor: #1C2838;\n\t\tfont-size: 16px;\n\t}\n\thtml {\n\t\t-webkit-font-smoothing: antialiased;\n\t}\n\n\t`;\n\nexport const px = value => {\n    if (typeof value === 'number') {\n        return value + 'px';\n    } else if (typeof value === 'string') {\n        /**\n         * Check if already ends with px, em, rem, etc.\n         */\n        const hasLetters = value.match(/\\d/g);\n\n        if (hasLetters) {\n            let numsOnly = hasLetters.join('');\n            return numsOnly + 'px';\n        }\n\n        return value + 'px';\n    } else {\n        console.log('Must pass string or number to px()');\n        return '25px';\n    }\n};\n\nexport const BREAKPOINT = '992px';\nexport const BREAKPOINT_PX = px(BREAKPOINT);\n\n\nexport function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    return result\n        ? `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(\n              result[3],\n              16\n          )}`\n        : '0, 0, 0';\n}\n"]},"metadata":{},"sourceType":"module"}