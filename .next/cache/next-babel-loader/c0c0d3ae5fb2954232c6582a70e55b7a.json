{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Question from \"../QuestionSingle\";\nimport swal from \"sweetalert2\";\nconst levels = [\"random\", \"easy\", \"medium\", \"hard\"];\nconst categories = [{\n  title: 'General Knowledge',\n  key: 9\n}, {\n  title: 'Television',\n  key: 14\n}, {\n  title: 'Film',\n  key: 11\n}, {\n  title: 'Music',\n  key: 12\n}, {\n  title: 'Science & Nature',\n  key: 17\n}, {\n  title: 'Sports',\n  key: 21\n}, {\n  title: 'Geography',\n  key: 22\n}, {\n  title: 'History',\n  key: 23\n}, {\n  title: 'Politics',\n  key: 24\n}, {\n  title: 'Celebrities',\n  key: 26\n}, {\n  title: 'Animals',\n  key: 27\n}];\n\nclass Questions extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isLoaded: false,\n      error: null,\n      questions: [],\n      points: 0,\n      difficulty: null,\n      category: null,\n      isStarted: null,\n      questionsAnswered: 0\n    });\n\n    _defineProperty(this, \"fetchQuestions\", () => {\n      let level = this.state.difficulty === \"random\" || this.state.difficulty === null ? \"\" : `&difficulty=${this.state.difficulty}`;\n      let category = this.state.category === null ? `&category=${9}` : `&category=${this.state.category}`;\n      fetch(`https://opentdb.com/api.php?amount=10${level}${category}`).then(res => res.json()).then(result => {\n        this.setState({\n          isLoaded: true,\n          points: 0,\n          questions: result.results,\n          isStarted: true\n        });\n      }, error => {\n        this.setState({\n          isLoaded: true,\n          error\n        });\n      });\n    });\n\n    _defineProperty(this, \"updateCounter\", isAnsweredCorrect => {\n      console.log(this.state.questions.length);\n      this.setState(prevState => _objectSpread({}, prevState, {\n        points: isAnsweredCorrect && ++prevState.points || prevState.points,\n        questionsAnswered: ++prevState.questionsAnswered\n      }), () => {\n        if (this.state.questionsAnswered === this.state.questions.length) {\n          swal({\n            title: 'Complete!',\n            text: `You got ${this.state.points} / ${this.state.questions.length} questions correct.`,\n            type: 'success',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Review Answers',\n            cancelButtonText: 'Start New Trivia'\n          }).then(result => {\n            if (result.value) {\n              this.setState(prevState => _objectSpread({}, prevState));\n              return;\n            }\n          });\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleLevelClick\", level => {\n      this.setState({\n        difficulty: level\n      });\n    });\n\n    _defineProperty(this, \"handleCategoryClick\", category => {\n      this.setState({\n        category\n      });\n    });\n\n    _defineProperty(this, \"handleRestart\", () => {\n      swal({\n        title: 'Are you sure?',\n        text: \"You won't be able to come back to this quiz.\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Yes, restart!'\n      }).then(result => {\n        if (result.value) {\n          this.setState(prevState => _objectSpread({}, prevState, {\n            isStarted: null,\n            questionsAnswered: 0\n          }));\n          return;\n        }\n      });\n    });\n  }\n\n  render() {\n    const questions = this.state.questions;\n    const questionsCount = questions.length;\n    const currentLevel = this.state.difficulty || \"random\";\n    const currentCategory = this.state.category || 9;\n    console.log(this.state.questionsAnswered);\n    return __jsx(\"div\", null, !this.state.isStarted && __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"filters\"\n    }, __jsx(\"p\", null, \"Select a level:\"), __jsx(\"div\", {\n      className: \"levels-container\"\n    }, levels.map(level => {\n      const active = level === currentLevel ? \"active\" : \"\";\n      return __jsx(\"button\", {\n        key: level,\n        className: `levels ${active}`,\n        onClick: () => this.handleLevelClick(level)\n      }, level.toUpperCase());\n    })), __jsx(\"p\", null, \"Select a Category:\"), __jsx(\"div\", {\n      className: \"levels-container\"\n    }, categories.map(category => {\n      const active = category.key === currentCategory ? \"active\" : \"\";\n      return __jsx(\"button\", {\n        key: category.key,\n        className: `categories ${active}`,\n        onClick: () => this.handleCategoryClick(category.key)\n      }, category.title.toUpperCase());\n    }))), __jsx(\"div\", null, __jsx(\"button\", {\n      className: \"start\",\n      onClick: this.fetchQuestions\n    }, \"Begin Trivia\"))), this.state.isStarted && questions && __jsx(\"div\", {\n      className: \"container\"\n    }, __jsx(\"div\", {\n      className: \"counter\",\n      style: {\n        flex: '1'\n      }\n    }, __jsx(\"h3\", {\n      style: {\n        margin: '0 0 5px 0'\n      }\n    }, \"Points:\"), this.state.points, \"/\", questionsCount, __jsx(\"a\", {\n      style: {\n        display: 'block',\n        fontSize: '12px',\n        marginTop: '15px'\n      },\n      onClick: this.handleRestart\n    }, \"New Trivia\")), __jsx(\"div\", {\n      style: {\n        flex: '2'\n      }\n    }, questions.map(question => {\n      return __jsx(Question, {\n        key: question.question,\n        data: question,\n        triggerParentUpdate: this.updateCounter\n      });\n    }))));\n  }\n\n}\n\nexport default Questions;","map":{"version":3,"sources":["/Users/michelekempinsky2/Development/projects/Trivia-App/src/components/Questions/index.js"],"names":["React","Question","swal","levels","categories","title","key","Questions","Component","isLoaded","error","questions","points","difficulty","category","isStarted","questionsAnswered","level","state","fetch","then","res","json","result","setState","results","isAnsweredCorrect","console","log","length","prevState","text","type","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","value","render","questionsCount","currentLevel","currentCategory","map","active","handleLevelClick","toUpperCase","handleCategoryClick","fetchQuestions","flex","margin","display","fontSize","marginTop","handleRestart","question","updateCounter"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Question from \"../QuestionSingle\";\nimport swal from \"sweetalert2\";\n\n\nconst levels = [\"random\", \"easy\", \"medium\", \"hard\"];\nconst categories = [\n  {title: 'General Knowledge', key: 9},\n  {title: 'Television', key: 14},\n  {title: 'Film', key: 11},\n  {title: 'Music', key: 12},\n  {title: 'Science & Nature', key: 17},\n  {title: 'Sports', key: 21},\n  {title: 'Geography', key: 22},\n  {title: 'History', key: 23},\n  {title: 'Politics', key: 24},\n  {title: 'Celebrities', key: 26}, \n  {title: 'Animals', key: 27}\n]\n\nclass Questions extends React.Component {\n  state = {\n    isLoaded: false,\n    error: null,\n    questions: [],\n    points: 0,\n    difficulty: null,\n    category: null,\n    isStarted: null,\n    questionsAnswered: 0\n  };\n  fetchQuestions = () => {\n    let level =\n      this.state.difficulty === \"random\" || this.state.difficulty === null\n        ? \"\"\n        : `&difficulty=${this.state.difficulty}`;\n    let category = this.state.category === null ? `&category=${9}` : `&category=${this.state.category}`;\n    fetch(`https://opentdb.com/api.php?amount=10${level}${category}`)\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState(\n            {\n              isLoaded: true,\n              points: 0,\n              questions: result.results,\n              isStarted: true\n            }\n          );\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  };\n  updateCounter = isAnsweredCorrect => {\n    console.log(this.state.questions.length);\n      this.setState(prevState => ({\n        ...prevState,\n        points: isAnsweredCorrect && ++prevState.points || prevState.points,\n        questionsAnswered: ++prevState.questionsAnswered\n      }), () => {\n        if(this.state.questionsAnswered === this.state.questions.length){\n          swal({\n            title: 'Complete!',\n            text: `You got ${this.state.points} / ${this.state.questions.length} questions correct.`,\n            type: 'success',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Review Answers',\n            cancelButtonText: 'Start New Trivia'\n          }).then((result) => {\n            if (result.value) {\n              this.setState(prevState => ({\n                ...prevState,\n              }));\n              return;\n            }\n          })\n        }\n      });\n  };\n  handleLevelClick = level => {\n    this.setState(\n      {\n        difficulty: level\n      }\n    );\n  };\n  handleCategoryClick = category => {\n    this.setState(\n      {\n        category\n      }\n    );\n  };\n  handleRestart = () => {\n    swal({\n      title: 'Are you sure?',\n      text: \"You won't be able to come back to this quiz.\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, restart!'\n    }).then((result) => {\n      if (result.value) {\n        this.setState(prevState => ({\n          ...prevState, \n          isStarted: null,\n          questionsAnswered: 0\n        }));\n        return;\n      }\n    })\n  }\n\n  render() {\n    const questions = this.state.questions;\n    const questionsCount = questions.length;\n    const currentLevel = this.state.difficulty || \"random\";\n    const currentCategory = this.state.category || 9;\n    console.log(this.state.questionsAnswered);\n    return (\n      <div>\n        {!this.state.isStarted && (\n          <div>\n          <div className=\"filters\">\n            <p>Select a level:</p>\n            <div className=\"levels-container\">\n              {levels.map(level => {\n                const active = level === currentLevel ? \"active\" : \"\";\n                return (\n                  <button\n                    key={level}\n                    className={`levels ${active}`}\n                    onClick={() => this.handleLevelClick(level)}\n                  >\n                    {level.toUpperCase()}\n                  </button>\n                );\n              })}\n            </div>\n            <p>Select a Category:</p>\n            <div className=\"levels-container\">\n              {categories.map(category => {\n                const active = category.key === currentCategory ? \"active\" : \"\";\n                return (\n                  <button\n                    key={category.key}\n                    className={`categories ${active}`}\n                    onClick={() => this.handleCategoryClick(category.key)}\n                  >\n                    {category.title.toUpperCase()}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n          <div>\n            <button className=\"start\" onClick={this.fetchQuestions}>Begin Trivia</button>\n          </div>\n          </div>\n        )}\n        { this.state.isStarted && questions && (\n          <div className=\"container\">\n              <div className=\"counter\" style={{flex: '1'}}>\n                <h3 style={{margin: '0 0 5px 0'}}>Points:</h3>\n                {this.state.points}/{questionsCount}\n                <a \n                  style={{display: 'block', fontSize: '12px', marginTop: '15px'}}\n                  onClick={this.handleRestart}>New Trivia</a>\n              </div>\n            <div style={{flex: '2'}}>\n              {questions.map(question => {\n                return (\n                  <Question\n                    key={question.question}\n                    data={question}\n                    triggerParentUpdate={this.updateCounter}\n                  />\n                );\n              })}\n            </div>\n          </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Questions;\n"]},"metadata":{},"sourceType":"module"}