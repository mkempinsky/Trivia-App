{"version":3,"file":"static/development/pages/trivia.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/components/Button/index.js","webpack:///./src/components/Footer/index.js","webpack:///./src/components/QuestionSingle/index.js","webpack:///./src/components/Questions/index.js","webpack:///./src/lib/utils.js","webpack:///./src/pages/trivia.js","webpack:///external \"react\"","webpack:///external \"sweetalert2\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import React from \"react\";\nconst Button = props => {\n  return (\n    <div>\n      <button {...props}>{props.children}</button>\n    </div>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\n\nconst Footer = props => {\n  return (\n    <footer>\n      <div>hello from footer</div>\n    </footer>\n  );\n};\nexport default Footer;\n","import React from \"react\";\nimport { getProp, shuffleArray } from \"../../lib/utils\";\nimport Button from \"../Button\";\n\nclass Question extends React.Component {\n  state = {\n    isAnsweredCorrect: null,\n    isAnswered: null\n  };\n  componentDidMount = () => {\n    const data = this.props.data;\n    const correctAnswer = getProp(data, \"correct_answer\");\n    const incorrrectAnswers = getProp(data, \"incorrect_answers\");\n    // create array with all answers as object\n    const answers = incorrrectAnswers.map(answer => {\n      return { answer, correct: false };\n    });\n    answers.push({ answer: correctAnswer, correct: true });\n    const shuffledAnswers = shuffleArray(answers);\n    this.setState({\n      answers: shuffledAnswers\n    });\n    return;\n  };\n\n  handleClick = answer => {\n    this.setState(\n      {\n        isAnsweredCorrect: answer,\n        isAnswered: true\n      },\n      function() {\n        this.props.triggerParentUpdate(this.state.isAnsweredCorrect);\n      }\n    );\n  };\n\n  render() {\n    const data = this.props.data;\n    const question = getProp(data, \"question\");\n    const difficulty = getProp(data, \"difficulty\");\n    const category = getProp(data, \"category\").replace('Entertainment:', '');\n    const answers = this.state.answers;\n    return (\n      <div className=\"question-card\">\n        <p\n          style={{ textAlign: \"center\" }}\n          dangerouslySetInnerHTML={{ __html: question }}\n        />\n        <div className=\"answers-container\">\n          {this.state.answers && (\n            <div>\n              {answers.map(answer => {\n                const theme = this.state.isAnsweredCorrect\n                  ? \"correct\"\n                  : \"incorrect\";\n                const correctColor =\n                  answer.correct && this.state.isAnsweredCorrect && \"green\";\n                const showCorrect =\n                  answer.correct &&\n                  this.state.isAnswered &&\n                  !this.state.isAnsweredCorrect &&\n                  \"reveal-correct\";\n\n                return (\n                  <Button\n                    key={answer.answer}\n                    className={`question ${correctColor} ${showCorrect}`}\n                    disabled={this.state.isAnswered}\n                    onClick={() => this.handleClick(answer.correct)}\n                  >\n                    <span dangerouslySetInnerHTML={{ __html: answer.answer }} />\n                  </Button>\n                );\n              })}\n            </div>\n          )}\n        </div>\n        <div className=\"difficulty-container\">\n          Level:{\" \"}\n          {difficulty && difficulty === \"easy\" && (\n            <span>\n              <i className={`fas fa-circle ${difficulty}`} />\n            </span>\n          )}\n          {difficulty && difficulty === \"medium\" && (\n            <span>\n              <i className={`fas fa-circle ${difficulty}`} />\n              <i className={`fas fa-circle ${difficulty}`} />\n            </span>\n          )}\n          {difficulty && difficulty === \"hard\" && (\n            <span>\n              <i className={`fas fa-circle ${difficulty}`} />\n              <i className={`fas fa-circle ${difficulty}`} />\n              <i className={`fas fa-circle ${difficulty}`} />\n            </span>\n          )}\n        </div>\n        <span style={{fontSize: '12px'}} dangerouslySetInnerHTML={{__html: category}}/>\n      </div>\n    );\n  }\n}\nexport default Question;\n","import React from \"react\";\nimport Question from \"../QuestionSingle\";\nimport swal from \"sweetalert2\";\n\n\nconst levels = [\"random\", \"easy\", \"medium\", \"hard\"];\nconst categories = [\n  {title: 'General Knowledge', key: 9},\n  {title: 'Television', key: 14},\n  {title: 'Film', key: 11},\n  {title: 'Music', key: 12},\n  {title: 'Science & Nature', key: 17},\n  {title: 'Sports', key: 21},\n  {title: 'Geography', key: 22},\n  {title: 'History', key: 23},\n  {title: 'Politics', key: 24},\n  {title: 'Celebrities', key: 26}, \n  {title: 'Animals', key: 27}\n]\n\nclass Questions extends React.Component {\n  state = {\n    isLoaded: false,\n    error: null,\n    questions: [],\n    points: 0,\n    difficulty: null,\n    category: null,\n    isStarted: null,\n    questionsAnswered: 0\n  };\n  fetchQuestions = () => {\n    let level =\n      this.state.difficulty === \"random\" || this.state.difficulty === null\n        ? \"\"\n        : `&difficulty=${this.state.difficulty}`;\n    let category = this.state.category === null ? `&category=${9}` : `&category=${this.state.category}`;\n    fetch(`https://opentdb.com/api.php?amount=10${level}${category}`)\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState(\n            {\n              isLoaded: true,\n              points: 0,\n              questions: result.results,\n              isStarted: true\n            }\n          );\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  };\n  updateCounter = isAnsweredCorrect => {\n    console.log(this.state.questions.length);\n      this.setState(prevState => ({\n        ...prevState,\n        points: isAnsweredCorrect && ++prevState.points || prevState.points,\n        questionsAnswered: ++prevState.questionsAnswered\n      }), () => {\n        if(this.state.questionsAnswered === this.state.questions.length){\n          swal({\n            title: 'Complete!',\n            text: `You got ${this.state.points} / ${this.state.questions.length} questions correct.`,\n            type: 'success',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Review Answers',\n            cancelButtonText: 'Start New Trivia'\n          }).then((result) => {\n            if (result.value) {\n              this.setState(prevState => ({\n                ...prevState,\n              }));\n              return;\n            }\n          })\n        }\n      });\n  };\n  handleLevelClick = level => {\n    this.setState(\n      {\n        difficulty: level\n      }\n    );\n  };\n  handleCategoryClick = category => {\n    this.setState(\n      {\n        category\n      }\n    );\n  };\n  handleRestart = () => {\n    swal({\n      title: 'Are you sure?',\n      text: \"You won't be able to come back to this quiz.\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, restart!'\n    }).then((result) => {\n      if (result.value) {\n        this.setState(prevState => ({\n          ...prevState, \n          isStarted: null,\n          questionsAnswered: 0\n        }));\n        return;\n      }\n    })\n  }\n\n  render() {\n    const questions = this.state.questions;\n    const questionsCount = questions.length;\n    const currentLevel = this.state.difficulty || \"random\";\n    const currentCategory = this.state.category || 9;\n    console.log(this.state.questionsAnswered);\n    return (\n      <div>\n        {!this.state.isStarted && (\n          <div>\n          <div className=\"filters\">\n            <p>Select a level:</p>\n            <div className=\"levels-container\">\n              {levels.map(level => {\n                const active = level === currentLevel ? \"active\" : \"\";\n                return (\n                  <button\n                    key={level}\n                    className={`levels ${active}`}\n                    onClick={() => this.handleLevelClick(level)}\n                  >\n                    {level.toUpperCase()}\n                  </button>\n                );\n              })}\n            </div>\n            <p>Select a Category:</p>\n            <div className=\"levels-container\">\n              {categories.map(category => {\n                const active = category.key === currentCategory ? \"active\" : \"\";\n                return (\n                  <button\n                    key={category.key}\n                    className={`categories ${active}`}\n                    onClick={() => this.handleCategoryClick(category.key)}\n                  >\n                    {category.title.toUpperCase()}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n          <div>\n            <button className=\"start\" onClick={this.fetchQuestions}>Begin Trivia</button>\n          </div>\n          </div>\n        )}\n        { this.state.isStarted && questions && (\n          <div className=\"container\">\n              <div className=\"counter\" style={{flex: '1'}}>\n                <h3 style={{margin: '0 0 5px 0'}}>Points:</h3>\n                {this.state.points}/{questionsCount}\n                <a \n                  style={{display: 'block', fontSize: '12px', marginTop: '15px'}}\n                  onClick={this.handleRestart}>New Trivia</a>\n              </div>\n            <div style={{flex: '2'}}>\n              {questions.map(question => {\n                return (\n                  <Question\n                    key={question.question}\n                    data={question}\n                    triggerParentUpdate={this.updateCounter}\n                  />\n                );\n              })}\n            </div>\n          </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Questions;\n","export const getProp = (obj, keys, defaultValue = null) => {\n  const objectKeys = keys.split(\".\");\n  const allKeys = objectKeys.reduce((acc, key) => {\n    const match = key.match(/\\[\\d\\]$/);\n    if (match) {\n      const propName = key.slice(0, match.index);\n      propName && acc.push(propName);\n      const index = +key.slice(match.index + 1, key.length - 1);\n      acc.push(index);\n    } else {\n      acc.push(key);\n    }\n\n    return acc;\n  }, []);\n\n  const result = allKeys.reduce((acc, cur) => {\n    return acc === null || acc === undefined ? acc : acc[cur];\n  }, obj);\n\n  return result !== undefined && result !== null ? result : defaultValue;\n};\n\nexport const shuffleArray = array => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n","import React from \"react\";\nimport Questions from \"../components/Questions\";\nimport Footer from \"../components/Footer\";\n\nclass Trivia extends React.Component {\n  state = {\n    correctAnswers: null\n  };\n  render() {\n    return (\n      <div style={{maxWidth: '700px', margin: '0 auto'}}>\n        <h1>Totally Trivia</h1>\n        <Questions />\n      </div>\n    );\n  }\n}\nexport default Trivia;\n","module.exports = require(\"react\");","module.exports = require(\"sweetalert2\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxFA;AACA;AAAA;AACA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AAKA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAFA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AApBA;AAsBA;AAEA;AACA;AAFA;AAKA;AACA;AAEA;AA/BA;AACA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAIA;AAGA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAGA;AAIA;AAAA;AAIA;AAAA;AAKA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAnGA;AACA;AAmGA;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAFA;AAYA;AAIA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAtCA;AAuCA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAlEA;AAmEA;AAEA;AADA;AAIA;AACA;AAzEA;AA0EA;AAEA;AADA;AAIA;AACA;AAhFA;AAiFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAnGA;AACA;AAoGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AAGA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AAIA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AAMA;AAOA;AACA;AA9KA;AACA;AA+KA;;;;;;;;;;;;ACpMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AADA;AADA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAZA;AACA;AAYA;;;;;;;;;;;;;;;;;;;;;;;ACjBA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}