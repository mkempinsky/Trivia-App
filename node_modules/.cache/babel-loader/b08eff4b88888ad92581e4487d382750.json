{"ast":null,"code":"import _objectSpread from \"/Users/michelek/sites/Trivia-App/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/michelek/sites/Trivia-App/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michelek/sites/Trivia-App/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michelek/sites/Trivia-App/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michelek/sites/Trivia-App/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michelek/sites/Trivia-App/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michelek/sites/Trivia-App/src/components/Questions/index.js\";\nimport React from \"react\";\nimport Question from \"../QuestionSingle\";\nimport { getProp, shuffleArray } from \"../../lib/utils\";\nvar levels = [\"random\", \"easy\", \"medium\", \"hard\"];\nvar categories = [{\n  title: 'General Knowledge',\n  key: 9\n}];\n\nvar Questions =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Questions, _React$Component);\n\n  function Questions() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Questions);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Questions)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoaded: false,\n      error: null,\n      questions: [],\n      points: 0,\n      difficulty: null,\n      category: 9\n    };\n\n    _this.fetchQuestions = function () {\n      console.log(\"fetching questions\");\n      var level = _this.state.difficulty === \"random\" || _this.state.difficulty === null ? \"\" : \"&difficulty=\".concat(_this.state.difficulty);\n      var category = \"&category=\".concat(_this.state.category);\n      fetch(\"https://opentdb.com/api.php?amount=10\".concat(level).concat(category)).then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        _this.setState({\n          isLoaded: true,\n          points: 0,\n          questions: result.results\n        }, function () {\n          console.log(_this.state);\n        });\n      }, function (error) {\n        _this.setState({\n          isLoaded: true,\n          error: error\n        });\n      });\n    };\n\n    _this.componentDidMount = function () {\n      _this.fetchQuestions();\n    };\n\n    _this.updateCounter = function (isAnsweredCorrect) {\n      if (isAnsweredCorrect) {\n        _this.setState(function (prevState) {\n          return _objectSpread({}, prevState, {\n            points: ++_this.state.points\n          });\n        });\n      }\n    };\n\n    _this.handleLevelClick = function (level) {\n      _this.setState({\n        difficulty: level\n      }, function () {\n        _this.fetchQuestions();\n      });\n    };\n\n    _this.handleCategoryClick = function (category) {\n      _this.setState({\n        category: category\n      }, function () {\n        _this.fetchQuestions();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Questions, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var questions = this.state.questions;\n      var questionsCount = questions.length;\n      var currentLevel = this.state.difficulty || \"random\";\n      var currentcategory = this.state.difficulty || 9;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Select a level:\"), React.createElement(\"div\", {\n        className: \"levels-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, levels.map(function (level) {\n        var active = level === currentLevel ? \"active\" : \"\";\n        return React.createElement(\"button\", {\n          key: level,\n          className: \"levels \".concat(active),\n          onClick: function onClick() {\n            return _this2.handleLevelClick(level);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, level.toUpperCase());\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Select a Category:\"), React.createElement(\"div\", {\n        className: \"levels-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, categories.map(function (category) {\n        var active = category === currentcategory ? \"active\" : \"\";\n        return React.createElement(\"button\", {\n          key: category.key,\n          className: \"categorys \".concat(active),\n          onClick: function onClick() {\n            return _this2.handleCategoryClick(category.key);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, category.title.toUpperCase());\n      })), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"counter\",\n        style: {\n          flex: '1'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          margin: '0 0 5px 0'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Points:\"), this.state.points, \"/\", questionsCount), React.createElement(\"div\", {\n        style: {\n          flex: '2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, questions.map(function (question) {\n        return React.createElement(Question, {\n          key: question.question,\n          data: question,\n          triggerParentUpdate: _this2.updateCounter,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        });\n      }))));\n    }\n  }]);\n\n  return Questions;\n}(React.Component);\n\nexport default Questions;","map":{"version":3,"sources":["/Users/michelek/sites/Trivia-App/src/components/Questions/index.js"],"names":["React","Question","getProp","shuffleArray","levels","categories","title","key","Questions","state","isLoaded","error","questions","points","difficulty","category","fetchQuestions","console","log","level","fetch","then","res","json","result","setState","results","componentDidMount","updateCounter","isAnsweredCorrect","prevState","handleLevelClick","handleCategoryClick","questionsCount","length","currentLevel","currentcategory","map","active","toUpperCase","flex","margin","question","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Question from \"../QuestionSingle\";\nimport { getProp, shuffleArray } from \"../../lib/utils\";\n\nconst levels = [\"random\", \"easy\", \"medium\", \"hard\"];\nconst categories = [{title: 'General Knowledge', key: 9}]\n\nclass Questions extends React.Component {\n  state = {\n    isLoaded: false,\n    error: null,\n    questions: [],\n    points: 0,\n    difficulty: null,\n    category: 9\n  };\n\n  fetchQuestions = () => {\n    console.log(\"fetching questions\");\n    let level =\n      this.state.difficulty === \"random\" || this.state.difficulty === null\n        ? \"\"\n        : `&difficulty=${this.state.difficulty}`;\n    let category = `&category=${this.state.category}`;\n    fetch(`https://opentdb.com/api.php?amount=10${level}${category}`)\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState(\n            {\n              isLoaded: true,\n              points: 0,\n              questions: result.results\n            },\n            () => {\n              console.log(this.state);\n            }\n          );\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  };\n  componentDidMount = () => {\n    this.fetchQuestions();\n  };\n  updateCounter = isAnsweredCorrect => {\n    if (isAnsweredCorrect) {\n      this.setState(prevState => ({\n        ...prevState,\n        points: ++this.state.points\n      }));\n    }\n  };\n  handleLevelClick = level => {\n    this.setState(\n      {\n        difficulty: level\n      },\n      () => {\n        this.fetchQuestions();\n      }\n    );\n  };\n  handleCategoryClick = category => {\n    this.setState(\n      {\n        category\n      },\n      () => {\n        this.fetchQuestions();\n      }\n    );\n  };\n\n  render() {\n    const questions = this.state.questions;\n    const questionsCount = questions.length;\n    const currentLevel = this.state.difficulty || \"random\";\n    const currentcategory = this.state.difficulty || 9;\n\n    return (\n      <div>\n        <p>Select a level:</p>\n        <div className=\"levels-container\">\n          {levels.map(level => {\n            const active = level === currentLevel ? \"active\" : \"\";\n            return (\n              <button\n                key={level}\n                className={`levels ${active}`}\n                onClick={() => this.handleLevelClick(level)}\n              >\n                {level.toUpperCase()}\n              </button>\n            );\n          })}\n        </div>\n        <p>Select a Category:</p>\n        <div className=\"levels-container\">\n          {categories.map(category => {\n            const active = category === currentcategory ? \"active\" : \"\";\n            return (\n              <button\n                key={category.key}\n                className={`categorys ${active}`}\n                onClick={() => this.handleCategoryClick(category.key)}\n              >\n                {category.title.toUpperCase()}\n              </button>\n            );\n          })}\n        </div>\n        <div className=\"container\">\n          <div className=\"counter\" style={{flex: '1'}}>\n            <h3 style={{margin: '0 0 5px 0'}}>Points:</h3>\n            {this.state.points}/{questionsCount}\n          </div>\n          <div style={{flex: '2'}}>\n            {questions.map(question => {\n              return (\n                <Question\n                  key={question.question}\n                  data={question}\n                  triggerParentUpdate={this.updateCounter}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Questions;\n"]},"metadata":{},"sourceType":"module"}