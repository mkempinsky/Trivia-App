{"ast":null,"code":"import _objectSpread from \"/Users/michelek/sites/Trivia-App/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/michelek/sites/Trivia-App/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/michelek/sites/Trivia-App/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/michelek/sites/Trivia-App/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/michelek/sites/Trivia-App/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/michelek/sites/Trivia-App/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/michelek/sites/Trivia-App/src/components/Questions/index.js\";\nimport React from \"react\";\nimport Question from \"../QuestionSingle\";\nimport { getProp, shuffleArray } from \"../../lib/utils\";\nvar levels = [\"random\", \"easy\", \"medium\", \"hard\"];\n\nvar Questions =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Questions, _React$Component);\n\n  function Questions() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Questions);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Questions)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoaded: false,\n      error: null,\n      questions: [],\n      points: 0,\n      difficulty: null\n    };\n\n    _this.fetchQuestions = function () {\n      console.log(\"fetching questions\");\n      var level = _this.state.difficulty === \"random\" || _this.state.difficulty === null ? \"\" : \"&difficulty=\".concat(_this.state.difficulty);\n      fetch(\"https://opentdb.com/api.php?amount=10\".concat(level).concat(level)).then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        _this.setState({\n          isLoaded: true,\n          points: 0,\n          questions: result.results\n        }, function () {\n          console.log(_this.state);\n        });\n      }, function (error) {\n        _this.setState({\n          isLoaded: true,\n          error: error\n        });\n      });\n    };\n\n    _this.componentDidMount = function () {\n      _this.fetchQuestions();\n    };\n\n    _this.updateCounter = function (isAnsweredCorrect) {\n      if (isAnsweredCorrect) {\n        _this.setState(function (prevState) {\n          return _objectSpread({}, prevState, {\n            points: ++_this.state.points\n          });\n        });\n      }\n    };\n\n    _this.handleClick = function (level) {\n      _this.setState({\n        difficulty: level\n      }, function () {\n        _this.fetchQuestions();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Questions, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var questions = this.state.questions;\n      var questionsCount = questions.length;\n      var currentLevel = this.state.difficulty || \"random\";\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Select a level:\"), React.createElement(\"div\", {\n        className: \"levels-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, levels.map(function (level) {\n        var active = level === currentLevel ? \"active\" : \"\";\n        return React.createElement(\"button\", {\n          key: level,\n          className: \"levels \".concat(active),\n          onClick: function onClick() {\n            return _this2.handleClick(level);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, level.toUpperCase());\n      })), React.createElement(\"div\", {\n        className: \"counter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.state.points, \"/\", questionsCount), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, questions.map(function (question) {\n        return React.createElement(Question, {\n          key: question.question,\n          data: question,\n          triggerParentUpdate: _this2.updateCounter,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return Questions;\n}(React.Component);\n\nexport default Questions;","map":{"version":3,"sources":["/Users/michelek/sites/Trivia-App/src/components/Questions/index.js"],"names":["React","Question","getProp","shuffleArray","levels","Questions","state","isLoaded","error","questions","points","difficulty","fetchQuestions","console","log","level","fetch","then","res","json","result","setState","results","componentDidMount","updateCounter","isAnsweredCorrect","prevState","handleClick","questionsCount","length","currentLevel","map","active","toUpperCase","question","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Question from \"../QuestionSingle\";\nimport { getProp, shuffleArray } from \"../../lib/utils\";\n\nconst levels = [\"random\", \"easy\", \"medium\", \"hard\"];\n\nclass Questions extends React.Component {\n  state = {\n    isLoaded: false,\n    error: null,\n    questions: [],\n    points: 0,\n    difficulty: null\n  };\n\n  fetchQuestions = () => {\n    console.log(\"fetching questions\");\n    let level =\n      this.state.difficulty === \"random\" || this.state.difficulty === null\n        ? \"\"\n        : `&difficulty=${this.state.difficulty}`;\n\n    fetch(`https://opentdb.com/api.php?amount=10${level}${level}`)\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState(\n            {\n              isLoaded: true,\n              points: 0,\n              questions: result.results\n            },\n            () => {\n              console.log(this.state);\n            }\n          );\n        },\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  };\n  componentDidMount = () => {\n    this.fetchQuestions();\n  };\n  updateCounter = isAnsweredCorrect => {\n    if (isAnsweredCorrect) {\n      this.setState(prevState => ({\n        ...prevState,\n        points: ++this.state.points\n      }));\n    }\n  };\n  handleClick = level => {\n    this.setState(\n      {\n        difficulty: level\n      },\n      () => {\n        this.fetchQuestions();\n      }\n    );\n  };\n\n  render() {\n    const questions = this.state.questions;\n    const questionsCount = questions.length;\n    const currentLevel = this.state.difficulty || \"random\";\n    return (\n      <div>\n        <p>Select a level:</p>\n        <div className=\"levels-container\">\n          {levels.map(level => {\n            const active = level === currentLevel ? \"active\" : \"\";\n            return (\n              <button\n                key={level}\n                className={`levels ${active}`}\n                onClick={() => this.handleClick(level)}\n              >\n                {level.toUpperCase()}\n              </button>\n            );\n          })}\n        </div>\n        <div className=\"counter\">\n          {this.state.points}/{questionsCount}\n        </div>\n        <div>\n        {questions.map(question => {\n          return (\n            <Question\n              key={question.question}\n              data={question}\n              triggerParentUpdate={this.updateCounter}\n            />\n          );\n        })}\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Questions;\n"]},"metadata":{},"sourceType":"module"}